Test cases for BaseGeometry.integer_validator

integer_validator takes two arguments, name and value
value must be an integer, raises TypeError if value is not an integer

    >>> BaseGeometry = __import__("7-base_geometry").BaseGeometry
    >>> bg = BaseGeometry()
    >>> try:
    ...     bg.integer_validator("my_int", 12)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    >>> try:
    ...     bg.integer_validator("name", "john")
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [TypeError] name must be an integer

value must be greater than 0, raises ValueError if value is not greater than 0

    >>> try:
    ...     bg.integer_validator("age", 0)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0
    >>> try:
    ...     bg.integer_validator("age", -5)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))
    [ValueError] age must be greater than 0
    >>> try:
    ...     bg.integer_validator("age", 10)
    ... except Exception as e:
    ...     print("[{}] {}".format(e.__class__.__name__, e))


Others:

>>> bg.integer_validator("name", "Monty")
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("name", [3])
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("name", {7,8})
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("name", (7, ))
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("name", None)
Traceback (most recent call last):
...
TypeError: name must be an integer
>>> bg.integer_validator("num", "3")
Traceback (most recent call last):
...
TypeError: num must be an integer
>>> bg.integer_validator("neg_num", -3)
Traceback (most recent call last):
...
ValueError: neg_num must be greater than 0
>>> bg.integer_validator("float", 7.3)
Traceback (most recent call last):
...
TypeError: float must be an integer
>>> bg.integer_validator("neg_float", -3.5)
Traceback (most recent call last):
...
TypeError: neg_float must be an integer
>>> bg.integer_validator("bool", True)
Traceback (most recent call last):
...
TypeError: bool must be an integer
>>> bg.integer_validator("age")
Traceback (most recent call last):
...
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> bg.area()
Traceback (most recent call last):
...
Exception: area() is not implemented
